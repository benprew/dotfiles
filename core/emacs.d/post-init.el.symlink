;; Welcome message (optional)
(let ((inhibit-message t))
  (message (format "Initialization time: %s" (emacs-init-time))))

(require 'package)
;; This is only needed once, near the top of the file
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

;; Example usage:
;; (treesit-add-and-install 'python "https://github.com/tree-sitter/tree-sitter-python")
;; (treesit-add-and-install 'markdown "https://github.com/ikatyang/tree-sitter-markdown" "master" "tree-sitter-markdown/src")
(defun treesit-add-and-install (language repo &optional branch directory)
  "Add LANGUAGE to treesit-language-source-alist and install its grammar."
  (interactive
   (list (intern (read-string "Language name: "))
         (read-string "Repository URL: ")
         (let ((branch (read-string "Branch (optional): ")))
           (if (string-empty-p branch) nil branch))
         (let ((dir (read-string "Source directory (optional): ")))
           (if (string-empty-p dir) nil dir))))

  (let ((entry (list language repo)))
    (when branch
      (setq entry (append entry (list branch))))
    (when directory
      (setq entry (append entry (list directory))))

    (unless (boundp 'treesit-language-source-alist)
      (setq treesit-language-source-alist nil))

    (setq treesit-language-source-alist
          (assoc-delete-all language treesit-language-source-alist))

    (add-to-list 'treesit-language-source-alist entry)

    (if (treesit-language-available-p language)
        (message "Tree-sitter grammar for %s is already installed" language)
      (progn
        (message "Installing tree-sitter grammar for %s..." language)
        (condition-case err
            (progn
              (treesit-install-language-grammar language)
              (message "Successfully installed tree-sitter grammar for %s" language))
          (error
           (message "Failed to install tree-sitter grammar for %s: %s" language (error-message-string err))
           (signal (car err) (cdr err))))))))

;; semi-transparent emacs window
;; (set-frame-parameter (selected-frame) 'alpha '(85 85))
;; (add-to-list 'default-frame-alist '(alpha 85 85))

;;; Code:

(defvar personal-dir (expand-file-name ".emacs.d/personal"))

;; load the personal settings (this includes `custom-file')
(when (file-exists-p personal-dir)
  (mapc 'load (directory-files personal-dir 't "^[^#\.].*\\.el$")))


(server-start)

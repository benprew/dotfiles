#!/usr/bin/env ruby

# frozen_string_literal: true

require 'rubygems'
require 'httparty'

class Tracker
  include HTTParty
  base_uri 'https://www.pivotaltracker.com/services/v5'

  def initialize
    token = File.read("#{ENV['HOME']}/.pt_token").chomp
    self.class.headers('X-TrackerToken' => token)

    projects = {
      'data'   => 1_503_382,
      'devops' => 947_778,
      'pints'  => 2_141_994
    }
    ENV['PROJECT'] ||= 'pints'
    @project_id = projects[ENV['PROJECT'].downcase]
  end

  def me(query = {})
    self.class.get('/me', query: query).parsed_response
  end

  def story(story_id, *fields)
    resp = self.class.get(
      "/projects/#{@project_id}/stories/#{story_id}"
    ).parsed_response

    if fields.empty?
      resp
    else
      resp.select { |k, _v| fields.include?(k) }
    end
  end

  def tasks(story_id)
    self.class.get(
      "/projects/#{@project_id}/stories/#{story_id}/tasks"
    ).parsed_response
  end

  def todo
    resp = StringIO.new
    my_stories.each do |story|
      resp.write "#{story['id']} - #{story['name']}\n"
      tasks = tasks(story['id']) || []
      tasks.each do |t|
        state = t['complete'] ? '[x]' : '[ ]'
        resp.write "  #{state} #{t['description']}\n"
      end
      resp.write "\n"
    end
    resp.string
  end

  def oncall(story_title)
    query = {
      story_type: :chore,
      name: story_title,
      current_state: :started,
      owner_ids: [me(fields: 'id')['id']]
    }
    self.class.post(
      "/projects/#{@project_id}/stories",
      body: query
    ).parsed_response
  end

  def my_stories
    name = self.class.get('/me', query: { fields: 'name' })
               .parsed_response['name']
    self.class.get(
      "/projects/#{@project_id}/stories/",
      query: { filter: "mywork:#{name}" }
    ).parsed_response
  end

  def slug(story_id)
    story_info = story(story_id)
    title = story_info['name']
            .gsub(/\bthe\b/, '')
            .gsub(/\s+/, '-')
            .downcase
            .gsub(/[^a-z0-9-]/, '')[0, 60]
    "#{story_info['id']}-#{title}"
  end
end

method = ARGV[0]
args = ARGV[1..-1]

tracker = Tracker.new

unless method
  usage = <<~USAGE
    tracker todo - prints your open stories, with tasks
    tracker slug <story_id>  - prints a slug for a story (used for git branches)
    tracker story <story_id>  - the raw story
    ex: tracker slug 160898796
  USAGE
  puts usage
  exit 1
end

if tracker.respond_to?(method.to_sym)
  resp = tracker.send(method.to_sym, *args)
  if resp.is_a?(String)
    print resp
  else
    print resp.to_json
  end
end
